from unittest import TestCase

from cvefeed import CPEParser


class TestCPEParser(TestCase):
    def setUp(self):
        self.parser = CPEParser()

    def test_convert_cpe_uri_to_dict(self):
        cpe = 'cpe:/a:isc:dhcpd:3.0.1:rc8'
        expected = {'part': 'ApplicationPart',
                    'vendor': 'isc',
                    'product': 'dhcpd',
                    'version': '3.0.1',
                    'update': 'rc8'}
        actual = self.parser.convert_cpe_uri_to_dict(cpe)
        self.assertDictContainsSubset(expected, actual)

    def test_convert_cpe_uri_to_dict_with_missing_fields(self):
        cpe = 'cpe:/o:microsoft:windows_vista'
        expected = {'part': 'OperatingSystemPart',
                    'vendor': 'microsoft',
                    'product': 'windows_vista',
                    'version': '',
                    'update': ''}
        actual = self.parser.convert_cpe_uri_to_dict(cpe)
        self.assertDictContainsSubset(expected, actual)

    def test_convert_cpe_uri_to_list(self):
        cpe = 'cpe:/a:isc:dhcpd:3.0.1:rc8'
        expected = [cpe, 'ApplicationPart', 'isc', 'dhcpd', '3.0.1', 'rc8',
                    '', '']
        actual = self.parser.convert_cpe_uri_to_list(cpe)
        self.assertEquals(8, len(actual))
        self.assertEquals(expected, actual)

    def test_convert_cpe_uri_to_list_with_missing_values(self):
        cpe = 'cpe:/o:microsoft:windows_vista'
        expected = [cpe, 'OperatingSystemPart', 'microsoft', 'windows_vista',
                    '', '', '', '']
        actual = self.parser.convert_cpe_uri_to_list(cpe)
        self.assertEquals(8, len(actual))
        self.assertEquals(expected, actual)
