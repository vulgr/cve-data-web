import csv
import fileinput
import os

from .logger import get_logger


class NeoCSVWriter:
    # Node files
    CVEFILE = 'cve.csv'
    CWEFILE = 'cwe.csv'
    VENDORFILE = 'vendor.csv'
    REFTYPEFILE = 'reftype.csv'
    REFERENCEFILE = 'reference.csv'
    REFSOURCEFILE = 'refsource.csv'
    PRODUCTFILE = 'product.csv'
    CPEPARTSFILE = 'cpeparts.csv'
    # Relationship files
    AFFECTSFILE = 'Affects.csv'
    COMMONWEAKNESSFILE = 'CommonWeakness.csv'
    FROMREFSROUCEFILE = 'FromRefSource.csv'
    HASREFERENCEFILE = 'HasReference.csv'
    ISREFTYPEFILE = 'IsRefType.csv'
    OWNSFILE = 'Owns.csv'
    ISPARTFILE = 'IsPart.csv'
    # All files.
    OUTPUTS = [CVEFILE, CWEFILE, VENDORFILE, REFTYPEFILE, REFERENCEFILE,
               REFSOURCEFILE, PRODUCTFILE, CPEPARTSFILE, AFFECTSFILE,
               COMMONWEAKNESSFILE, FROMREFSROUCEFILE, HASREFERENCEFILE,
               ISREFTYPEFILE, OWNSFILE, ISPARTFILE]

    def __init__(self, outputdir=None):
        """ Create output directory if needed, configure logger."""
        if not outputdir:
            folder = os.path.dirname(os.path.realpath(__file__))
            self.outputdir = os.path.join(folder, 'output')
            if not os.path.exists(self.outputdir):
                os.mkdir(self.outputdir)
        else:
            folder = os.path.dirname(os.path.realpath(outputdir))
            self.outputdir = os.path.join(folder, outputdir)
            if not os.path.exists(self.outputdir):
                os.mkdir(self.outputdir)
        self.logger = get_logger('CVE')
        msg = '{} selected as output directory.'.format(self.outputdir)
        self.logger.info(msg)

    def _get_target_data_file(self, filename):
        """ Return absolute path to outputdir/filename."""
        return os.path.join(self.outputdir, filename)

    def _write_new_csv_with_headers(self, filename, headers):
        """ Create new CSV with provided headers. Overwrites existing."""
        target = self._get_target_data_file(filename)
        with open(target, 'wb') as outfile:
            csv.writer(outfile).writerow(headers)

    def setup_node_files(self):
        """ Create CSV files for nodes. Overwrites existing."""
        nodes = dict()
        nodes[self.CVEFILE] = ['cveId:ID', 'summary', ':LABEL']
        nodes[self.CWEFILE] = ['cweId:ID', ':LABEL']
        nodes[self.VENDORFILE] = ['vendorId:ID', ':LABEL']
        nodes[self.REFTYPEFILE] = ['refType:ID', ':LABEL']
        nodes[self.REFERENCEFILE] = ['href:ID', ':LABEL']
        nodes[self.REFSOURCEFILE] = ['refSrc:ID', ':LABEL']
        nodes[self.CPEPARTSFILE] = ['partId:ID', ':LABEL']
        nodes[self.PRODUCTFILE] = ['cpe:ID', 'product',
                                   'update', 'version', ':LABEL']
        for filename, headers in nodes.iteritems():
            self.logger.info('Creating {}. . .'.format(filename))
            self._write_new_csv_with_headers(filename, headers)
            if filename is self.CPEPARTSFILE:
                self.csv_append_row(filename, 'HardwarePart', 'Hardware')
                self.csv_append_row(filename, 'ApplicationPart',
                                    'Application')
                self.csv_append_row(filename, 'OperatingSystemPart',
                                    'OperatingSystem')

    def setup_relationship_files(self):
        """ Create CSV files for relationships. Overwrites existing."""
        headers = [':START_ID', ':END_ID', ':TYPE']
        relfiles = list()
        relfiles.append(self.AFFECTSFILE)
        relfiles.append(self.COMMONWEAKNESSFILE)
        relfiles.append(self.FROMREFSROUCEFILE)
        relfiles.append(self.HASREFERENCEFILE)
        relfiles.append(self.ISREFTYPEFILE)
        relfiles.append(self.OWNSFILE)
        relfiles.append(self.ISPARTFILE)
        for filename in relfiles:
            self.logger.info('Creating {}. . .'.format(filename))
            self._write_new_csv_with_headers(filename, headers)

    def setup_files(self):
        """ Create CSVs for nodes and relationships."""
        self.setup_node_files()
        self.setup_relationship_files()

    def csv_append_row(self, filename, *args):
        """
        Append single row to filename. Each positional arg is a separate
         column, for example:
            csv.append('test.csv', 'one', 'two', 'three')
        will add the following line to test.csv:
            one,two,three
        :param filename: filename to write to.
        """
        target = self._get_target_data_file(filename)
        with open(target, 'ab') as outfile:
            csv.writer(outfile, quoting=csv.QUOTE_ALL,
                       quotechar='\"', doublequote=False, escapechar='\\').writerow(list(args))

    def csv_append_multiple_rows(self, filename, rows):
        """
        Append multiple rows to filename.
        :param filename: filename to write to.
        :param rows: list of lists, each list consisting of a row to write.
        """
        target = self._get_target_data_file(filename)
        with open(target, 'ab') as outfile:
            for row in rows:
                csv.writer(outfile, quoting=csv.QUOTE_ALL,
                           quotechar='\"', doublequote=False, escapechar='\\').writerow(row)

    def remove_duplicates(self, filename):
        """
        Remove duplicate values from CSV file.
        :param filename: filename to remove duplicate rows from
        """
        self.logger.info('Removing duplicates from {}. . .'.format(filename))
        uniquelines = set()
        filename = self._get_target_data_file(filename)
        with open(filename) as inputfile:
            msg = 'Total rows: {}'.format(sum(1 for _ in inputfile))
            self.logger.info(msg)
        for row in fileinput.FileInput(filename, inplace=1):
            if row in uniquelines:
                continue
            uniquelines.add(row)
            print(row),
        self.logger.info('Unique rows: {}.'.format(len(uniquelines)))
