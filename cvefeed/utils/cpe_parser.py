class CPEParser:
    def __init__(self):
        pass

    def convert_cpe_uri_to_dict(self, cpe):
        """
        Convert a CPE URI to a dict.
        :param cpe: CPE URI as string
        :return: dict of cpe values
        """
        cpesplit = dict(enumerate(cpe.split(':')))
        cpedict = dict()
        part = self.get_part_name(cpesplit.get(1))
        cpedict['cpe'] = cpe
        cpedict['part'] = part
        cpedict['vendor'] = cpesplit.get(2, '')
        cpedict['product'] = cpesplit.get(3, '')
        cpedict['version'] = cpesplit.get(4, '')
        cpedict['update'] = cpesplit.get(5, '')
        cpedict['edition'] = cpesplit.get(6, '')
        cpedict['lang'] = cpesplit.get(7, '')
        return cpedict

    def convert_cpe_uri_to_list(self, cpe):
        """
        Convert a CPE URI to a list. Indices:
         0: CPE URI
         1: part
         2: vendor
         3: product
         4: version
         5: update
         6: edition
         7: language
        :param cpe: CPE URI as string
        :return: list of cpe values
        """
        cpesplit = dict(enumerate(cpe.split(':')))
        cpelist = list()
        cpelist.append(cpe)
        part = self.get_part_name(cpesplit.get(1))
        cpelist.append(part)
        cpelist.append(cpesplit.get(2))
        cpelist.append(cpesplit.get(3))
        cpelist.append(cpesplit.get(4, ''))
        cpelist.append(cpesplit.get(5, ''))
        cpelist.append(cpesplit.get(6, ''))
        cpelist.append(cpesplit.get(7, ''))
        return cpelist

    @staticmethod
    def get_part_name(part):
        if part == '/h':
            return 'HardwarePart'
        elif part == '/a':
            return 'ApplicationPart'
        elif part == '/o':
            return 'OperatingSystemPart'
