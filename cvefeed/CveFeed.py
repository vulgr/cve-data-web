import requests
import requests.exceptions
import sys
import gzip
import xml.etree.cElementTree as cElementTree


class CveFeed:

    ENTRY_TAG = '{http://scap.nist.gov/schema/feed/vulnerability/2.0}entry'
    PUBLISHED_TAG = '{http://scap.nist.gov/schema/vulnerability/0.4}published-datetime'
    LAST_MODIFIED_TAG = '{http://scap.nist.gov/schema/vulnerability/0.4}last-modified-datetime'
    REFERENCES_TAG = '{http://scap.nist.gov/schema/vulnerability/0.4}last-modified-datetime'
    CVE_ID = '{http://scap.nist.gov/schema/vulnerability/0.4}cve-id'
    SUMMARY_TAG = '{http://scap.nist.gov/schema/vulnerability/0.4}summary'
    REFERENCES_TAG = '{http://scap.nist.gov/schema/vulnerability/0.4}references'
    REFERENCE_TAG = '{http://scap.nist.gov/schema/vulnerability/0.4}reference'
    SOURCE_TAG = '{http://scap.nist.gov/schema/vulnerability/0.4}source'
    LANG_ATTRIB = '{http://www.w3.org/XML/1998/namespace}lang'

    def __init__(self, url):
        self.url = url

    def fetch(self, output_file):
        download = requests.get(self.url, stream=True)

        try:
            with open(output_file, 'wb') as file:
               for chunk in download.iter_content(chunk_size=1024):
                   if chunk:
                        file.write(chunk)

            file.close()

            self.gz_to_xml(output_file)

        except requests.exceptions.RequestException as e:
            print "requestexception"
        except IOError as e:
            print "ioerror"
        except:
            print "Error occurred", sys.exc_info()[0]

    def gz_to_xml(self, file):

        try:

            with gzip.open(file, 'rb') as file_content:
                xml_data = file_content.read()

            self.process_xml(xml_data)

        except IOError as e:
            print "gzToXML error"

    def process_xml(self, xml_data):

        try:
            root = cElementTree.fromstring(xml_data)

            for entry in root.findall(CveFeed.ENTRY_TAG):

                current_entry = {}
                attribs = entry.attrib
                current_entry['id'] = attribs['id']
                current_entry['references'] = [];

#                Get the cve-id
                cve_id = entry.find(CveFeed.CVE_ID)
                current_entry['cve-id'] = cve_id.text

#                Get the published dateTime
                published = entry.find(CveFeed.PUBLISHED_TAG)
                current_entry['published-datetime'] = published.text

#                Get last modified dateTime
                last_modified = entry.find(CveFeed.LAST_MODIFIED_TAG)
                current_entry['last-modified-datetime'] = last_modified.text

#                Get the summary
                summary = entry.find(CveFeed.SUMMARY_TAG)
                current_entry['summary'] = summary.text

                for reference in entry.findall(CveFeed.REFERENCES_TAG):
                    current_reference = {}

                    ref_attribs = reference.attrib

                    source = reference.find(CveFeed.SOURCE_TAG);

                    current_reference['source'] = source.text
                    current_reference['reference-type'] = ref_attribs['reference_type']
                    current_reference['lang'] = ref_attribs[CveFeed.LANG_ATTRIB]

                    ref_info = reference.find(CveFeed.REFERENCE_TAG)
                    ref_info_attribs = ref_info.attrib

                    current_reference['href'] = ref_info_attribs['href']
                    current_reference['text'] = ref_info.text
                    current_reference['ref-lang'] = ref_info_attribs[CveFeed.LANG_ATTRIB]
                    current_entry['references'].append(current_reference)

                self.save_to_db(current_entry)

        except AttributeError as e:
            print e.message

    def save_to_db(self, entry):
        print "save_to_db"


if __name__ == '__main__':
    feed = CveFeed("https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-Modified.xml.gz")
    feed.fetch("/tmp/cve.xml.gz")
