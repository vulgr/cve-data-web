from Queue import Queue
from threading import Thread


class CVEWriterQueues:
    cvewriterqueue = None
    productwriterqueue = None
    referencewriterqueue = None

    def __init__(self):
        self.init_cvewriter_queue()
        self.init_productwriter_queue()
        self.init_referencewriter_queue()
        self.queues = [self.cvewriterqueue, self.productwriterqueue,
                       self.referencewriterqueue]

    def init_cvewriter_queue(self):
        self.cvewriterqueue = Queue(maxsize=0)
        worker = Thread(target=self._cve_writer_queue_listener,
                        args=(self.cvewriterqueue,))
        worker.setDaemon(True)
        worker.start()

    @staticmethod
    def _cve_writer_queue_listener(q):
        while True:
            items = q.get()
            func = items[0]
            args = items[1:]
            func(*args)
            q.task_done()

    def init_productwriter_queue(self):
        self.productwriterqueue = Queue(maxsize=0)
        worker = Thread(target=self._productwriter_queue_listener,
                        args=(self.productwriterqueue,))
        worker.setDaemon(True)
        worker.start()

    @staticmethod
    def _productwriter_queue_listener(q):
        while True:
            items = q.get()
            func = items[0]
            args = items[1:]
            func(*args)
            q.task_done()

    def init_referencewriter_queue(self):
        self.referencewriterqueue = Queue(maxsize=0)
        worker = Thread(target=self._referencewriter_queue_listener,
                        args=(self.referencewriterqueue,))
        worker.setDaemon(True)
        worker.start()

    @staticmethod
    def _referencewriter_queue_listener(q):
        while True:
            items = q.get()
            func = items[0]
            args = items[1:]
            func(*args)
            q.task_done()
